# derived from TFC layer
# color are derived from symbol categorie. Valid values are:
# 's': Service point
# 'i': idle ground service car (might be moving)
# 'b': busy ground service car (at servicepoint or approaching)
# 'a': main aircraft
# 'A': ground service aircraft
#
# Class things:
var name = 'GROUNDSERVICES-vehicle';
var parents = [DotSym];
var __self__ = caller(0)[0];
DotSym.makeinstance( name, __self__ );

SymbolLayer.get(name).df_style = { # style to use by default
	line_width: 1,
	scale_factor: 1,	
	color_default: [1,1,1]
};

var element_type = "group"; # we want a group, becomes "me.element"
var icon = nil;
var iconsize = 3;
# general idea for colors is: the more important the darker.
var defaultcolor = [0,0,1];
var coloraircraft = [0.2,0.2,1];
var colorgsaircraft = [0.2,0.8,0.9];
var colorIdle = [0,1,0];
var colorBusy = [0,0.6,0];
var colorSP = [1,0,1];

var draw = func {
	
	#var callsign = me.model.getNode("callsign").getValue();
	# print("Drawing traffic for:", callsign );
	var categorie = me.model.getCategorie();
	#groundservices.logging.debug("draw:categorie="~categorie);
	var c = defaultcolor;
	if (categorie == 'i') {
	    c = colorIdle;
	} else if (categorie == 'b') {
        c = colorBusy;
    } else if (categorie == 's') {
        c = colorSP;
    } else if (categorie == 'a') {
        c = coloraircraft;
    } else if (categorie == 'A') {
        c = colorgsaircraft;
    }
    if (me.icon == nil) {
	    #logging.debug("drawing icon");
		me.icon = me.element.createChild("path").setStrokeLineWidth(3);
		me.icon.moveTo(-iconsize,0)
        	.lineTo(0,-iconsize)
        	.lineTo(iconsize,0)
        	.lineTo(0,iconsize)
        	.close();
	    me.icon.setColor(c);
	    me.icon.setColorFill(c);
	    me.color=c;        	
	}
	if (me.color != c) {
	    me.icon.setColor(c);
        me.icon.setColorFill(c);
        me.color=c;
	}
};

